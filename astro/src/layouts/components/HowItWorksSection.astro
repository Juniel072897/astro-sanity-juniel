---
import { urlFor } from "@/lib/sanityImage";

interface Props {
  data: {
    sectionHeading: string;
    steps: {
      stepNumber: number;
      title: string;
      description: string;
      mainImage: any;
      sideImages?: any[];
      ctaText?: string;
      ctaLink?: string;
    }[];
  };
}

const { data } = Astro.props;
---

<section class="py-20 px-4 max-w-7xl mx-auto">
  <h2 class="text-4xl font-extrabold text-center mb-12 fade-in-up delay-1">
    {data.sectionHeading}
  </h2>

  <!-- Row 1: Steps 1 & 2 Side-by-Side -->
  <div class="grid md:grid-cols-2 gap-8">
    {data.steps.slice(0, 2).map((step, idx) => (
      <div class={`rounded-2xl border border-orange-600 bg-gradient-to-br from-[#2d2d2d] to-[#f26a06]/20 p-6 fade-in-up delay-${idx + 2}`}>
        <div class="flex items-start gap-4">
          <span class="text-orange-600 text-8xl font-extrabold">{step.stepNumber}</span>
          <div>
            <h3 class="text-white text-3xl font-bold mb-2">{step.title}</h3>
            <p class="text-white text-sm mb-4">{step.description}</p>
          </div>
        </div>

        <!-- Main image -->
        <div class="mt-4">
          <img
            src={urlFor(step.mainImage).width(250).fit("max").url()}
            alt={step.title}
            class="mx-auto max-w-[300px] object-contain"
          />
        </div>

        <!-- Side images -->
        {step.sideImages && step.sideImages.length > 0 && (
          <div class="flex gap-2 flex-wrap mt-4 justify-center">
            {step.sideImages.map((img, i) => (
              <img
                src={urlFor(img).width(100).height(100).fit("crop").url()}
                alt={`Side Image ${i + 1}`}
                class="rounded-full w-20 h-20 object-cover"
              />
            ))}
          </div>
        )}
      </div>
    ))}
  </div>

  <!-- Row 2: Step 3 Full Width -->
  {data.steps.length > 2 && (
    <div class="mt-10 rounded-2xl border border-orange-400 bg-gradient-to-br from-[#2d2d2d] to-[#f26a06]/20 p-6 grid md:grid-cols-2 gap-8 items-center fade-in-up delay-4">
      <!-- Left -->
      <div>
        <h3 class="text-white text-3xl font-bold mb-2">
          <span class="text-orange-500 text-8xl font-extrabold mr-2">
            {data.steps[2].stepNumber}
          </span>
          {data.steps[2].title}
        </h3>
        <p class="text-white mb-4">{data.steps[2].description}</p>

        {data.steps[2].ctaText && data.steps[2].ctaLink && (
          <a
            href={data.steps[2].ctaLink}
            class="inline-block bg-orange-500 hover:bg-white hover:text-orange-600 text-white font-bold px-6 py-3 rounded-full shadow-md transition"
          >
            {data.steps[2].ctaText}
          </a>
        )}
      </div>

      <!-- Right: Side Images Grid -->
      {data.steps[2].sideImages && data.steps[2].sideImages.length > 0 && (
        <div class={data.steps[2].sideImages.length > 1 ? "grid grid-cols-2 gap-2" : "flex justify-center"}>
          {data.steps[2].sideImages.map((img, i) => (
            <img
              src={urlFor(img.asset).width(600).fit("max").url()}
              alt={`Step 3 Side Image ${i + 1}`}
              class="rounded-lg object-cover w-full h-auto"
            />
          ))}
        </div>
      )}
    </div>
  )}
</section>

<!-- 🔁 Animation Styles -->
<style>
  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(40px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in-up {
    opacity: 0;
    transform: translateY(40px);
    transition: all 0.4s ease-out;
    will-change: transform, opacity;
  }

  .fade-in-up.show {
    animation: fadeInUp 1s ease-out both;
  }

  .delay-1 { animation-delay: 0.2s; }
  .delay-2 { animation-delay: 0.4s; }
  .delay-3 { animation-delay: 0.6s; }
  .delay-4 { animation-delay: 0.8s; }
</style>

<!-- 🧠 Intersection Observer -->
<script type="module">
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("show");
          observer.unobserve(entry.target);
        }
      });
    },
    {
      threshold: 0.2,
    }
  );

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".fade-in-up").forEach((el) => {
      observer.observe(el);
    });
  });
</script>
